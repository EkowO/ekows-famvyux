#!/usr/bin/env python3

"""
Google OAuth Setup Wizard for MovieHub
This script helps you configure Google OAuth authentication.
"""

import os

def main():
    print("üîß Google OAuth Setup Wizard for MovieHub")
    print("=" * 50)
    
    print("\nüìã Before we start, you need to:")
    print("1. Go to Google Cloud Console (https://console.cloud.google.com/)")
    print("2. Create a new project or select existing one")
    print("3. Enable the Google OAuth 2.0 API")
    print("4. Create OAuth 2.0 Client ID credentials")
    print("5. Add redirect URI: http://localhost:8000/auth/google/callback")
    
    print("\n‚ùì Do you have your Google OAuth credentials ready?")
    print("   (If not, follow the detailed guide in GOOGLE_OAUTH_SETUP.md)")
    
    choice = input("\nEnter 'y' if you have credentials, 'n' to see detailed setup guide: ").strip().lower()
    
    if choice in ['n', 'no']:
        print("\nüìñ Detailed Setup Instructions:")
        print("=" * 40)
        print("""
1. Go to Google Cloud Console: https://console.cloud.google.com/
2. Click 'Select a project' ‚Üí 'New Project'
3. Enter project name (e.g., 'MovieHub OAuth')
4. Wait for project creation to complete

5. Enable Google OAuth API:
   - Go to 'APIs & Services' ‚Üí 'Library'
   - Search for 'Google+ API' or 'Google Identity'
   - Click 'Enable'

6. Create OAuth Credentials:
   - Go to 'APIs & Services' ‚Üí 'Credentials'
   - Click 'Create Credentials' ‚Üí 'OAuth 2.0 Client IDs'
   - Choose 'Web application'
   - Name: 'MovieHub Web Client'
   - Authorized redirect URIs: http://localhost:8000/auth/google/callback
   - Click 'Create'

7. Copy your Client ID and Client Secret from the popup
        """)
        
        input("\nPress Enter when you have your credentials ready...")
    
    if choice in ['y', 'yes'] or choice in ['n', 'no']:
        print("\nüîë Please enter your Google OAuth credentials:")
        print("(You can find these in your Google Cloud Console)")
        
        client_id = input("\nüìß Google Client ID: ").strip()
        client_secret = input("üîê Google Client Secret: ").strip()
        
        if not client_id or not client_secret:
            print("‚ùå Both Client ID and Client Secret are required.")
            return
        
        if client_id == "your-google-client-id.googleusercontent.com":
            print("‚ùå Please enter your actual Google Client ID, not the placeholder.")
            return
            
        if client_secret == "your-google-client-secret":
            print("‚ùå Please enter your actual Google Client Secret, not the placeholder.")
            return
        
        # Update oauth_config.py
        config_content = f'''# Google OAuth Configuration
# Generated by setup wizard on {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

GOOGLE_CLIENT_ID = "{client_id}"
GOOGLE_CLIENT_SECRET = "{client_secret}"

# OAuth Settings
OAUTH_REDIRECT_URI = "http://localhost:8000/auth/google/callback"
SECRET_KEY = "your-secret-key-change-this-in-production"

# Production Settings (update these for deployment)
# OAUTH_REDIRECT_URI = "https://yourdomain.com/auth/google/callback"
'''
        
        try:
            with open('oauth_config.py', 'w', encoding='utf-8') as f:
                f.write(config_content)
            
            print("\n‚úÖ OAuth configuration updated successfully!")
            print("üìÇ Configuration saved to: oauth_config.py")
            
            print("\nüß™ Testing configuration...")
            
            # Test the configuration
            try:
                import sys
                sys.path.append('.')
                from oauth_config import GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET
                
                if GOOGLE_CLIENT_ID == client_id and GOOGLE_CLIENT_SECRET == client_secret:
                    print("‚úÖ Configuration test passed!")
                else:
                    print("‚ö†Ô∏è  Configuration test failed - values don't match")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Configuration test failed: {e}")
            
            print("\nüöÄ Setup complete! Next steps:")
            print("1. Start the server: python start_server.py")
            print("2. Visit: http://localhost:8000/login")
            print("3. Click 'Continue with Google' to test")
            
            print("\nüîí Security Notes:")
            print("- Never commit oauth_config.py to version control")
            print("- Use environment variables in production")
            print("- Regularly rotate your OAuth secrets")
            
        except Exception as e:
            print(f"‚ùå Error saving configuration: {e}")
    
    else:
        print("‚ùå Invalid choice. Please run the script again.")

if __name__ == "__main__":
    main()
